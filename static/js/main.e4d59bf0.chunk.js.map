{"version":3,"sources":["assets/images/meme-welcome.jpeg","services/memeService.js","cmps/Navbar.js","pages/Home.js","cmps/Canvas.js","hooks/useInput.js","hooks/useToggle.js","cmps/Edit/ColorPicker.js","cmps/Edit/MemeForm.js","cmps/Edit/PicsCarousel.js","cmps/Edit/MemeEdit.js","cmps/MemeModal.js","pages/MemeDetails.js","cmps/MemePreview.js","cmps/MemeList.js","pages/MemeApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","defaults","baseURL","gMemes","getMemes","a","get","res","resMemes","data","memes","id","length","find","meme","memeById","console","log","memeData","text1","toUpperCase","text2","font","form","FormData","append","currMeme","process","color1","stroke1","color2","stroke2","method","url","headers","_boundary","response","error","alert","getMemeById","postMeme","Navbar","className","exact","activeClassName","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Home","props","src","welcomePic","alt","Canvas","texts","name","style","position","width","height","maxHeight","fontFamily","top","color","WebkitTextStroke","bottom","useInput","initialVal","useState","value","setValue","onChange","e","target","useToggle","state","setState","toggle","ColorPicker","changeColor","colorType","toggleVisibility","setColor","useEffect","onColorSelection","changedColor","onClick","htmlFor","data-color","placeholder","MemeForm","handleFormData","updateTexts","bindText1","resetText1","bindText2","resetText2","bindFont","resetFont","isVisible","toggleIsVisible","setColor1","setColor2","setStroke1","setStroke2","setType","useCallback","toggleColorPicker","preventDefault","currentTarget","attributes","defaultValue","required","backgroundColor","input-data","title","PicsCarousel","onSelectPic","carouselPics","setCarouselPics","renderImages","pictures","handleOnDragStart","map","picture","key","cursor","onDragStart","picsToRender","push","mouseDragEnabled","duration","stagePadding","paddingLeft","paddingRight","MemeEdit","Fragment","selectedPic","memeUrl","MemeModal","newMemeUrl","href","rel","MemeDetails","useParams","history","useHistory","setCurrMeme","setTexts","setFont","setnewMemeUrl","isEditMode","toggleEditMode","generatedMemeData","memeService","picUrl","selectedMeme","filter","MemePreview","MemeList","MemeApp","createBrowserHistory","App","setMemes","memesToRender","component","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e4d59bf0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/meme-welcome.60f6b3e8.jpeg\";","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://api.imgflip.com';\r\n// axios.defaults.headers.post['Content-Type'] = `multipart/form-data; boundary=${form._boundary}`;\r\n\r\nlet gMemes = [];\r\n\r\nasync function getMemes() {\r\n    const res = await axios.get('/get_memes');\r\n    let resMemes = res.data.data.memes;\r\n    gMemes = resMemes;\r\n    return resMemes;\r\n}\r\n\r\nasync function getMemeById(id) {\r\n    try {\r\n        if (!gMemes.length) await getMemes();\r\n        const memeById = await gMemes.find(meme => meme.id === id);\r\n        return memeById;\r\n    }\r\n    catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nasync function postMeme(memeData) {\r\n\r\n    // let text2PosY = memeData.currMeme.height - 130;\r\n    let text1 = memeData.text1.toUpperCase();\r\n    let text2 = memeData.text2.toUpperCase();\r\n    let font = memeData.font;\r\n    console.log(font);\r\n\r\n    const form = new FormData();\r\n    form.append('template_id', memeData.currMeme.id);\r\n    form.append('username', process.env.REACT_APP_MEME_IMGFLIP_USERNAME);\r\n    form.append('password', process.env.REACT_APP_MEME_IMGFLIP_PASSWORD);\r\n    form.append('max_font_size', '50');\r\n    // form.append('font', font);\r\n    form.append('boxes[0][text]', text1);\r\n    form.append('boxes[0][font]', font);\r\n    // form.append('boxes[0][x]', '8');\r\n    // form.append('boxes[0][y]', '8');\r\n    // form.append('boxes[0][width]', '548');\r\n    // form.append('boxes[0][height]', '100');\r\n    form.append('boxes[0][color]', memeData.color1);\r\n    form.append('boxes[0][outline_color]', memeData.stroke1);\r\n    form.append('boxes[1][text]', text2);\r\n    form.append('boxes[1][font]', font);\r\n    // form.append('boxes[1][x]', '8');\r\n    // form.append('boxes[1][y]', text2PosY);\r\n    // form.append('boxes[1][width]', '300');\r\n    // form.append('boxes[1][height]', '100');\r\n    form.append('boxes[1][color]', memeData.color2);\r\n    form.append('boxes[1][outline_color]', memeData.stroke2);\r\n\r\n\r\n    try {\r\n        const response = await axios({\r\n            method: 'post',\r\n            url: `/caption_image`,\r\n            data: form,\r\n            headers: {\r\n                'content-type': `multipart/form-data; boundary=${form._boundary}`,\r\n            },\r\n        });\r\n        return response.data.data.url;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        alert('Imgflip API request failed:', e);\r\n    }\r\n}\r\n\r\nexport default {\r\n    getMemes,\r\n    getMemeById,\r\n    postMeme\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <NavLink \r\n                exact \r\n                activeClassName=\"active-link\" \r\n                className=\"navbar-brand\" \r\n                to=\"/\"\r\n            >\r\n                Meme Generator\r\n            </NavLink>\r\n            <button \r\n                className=\"navbar-toggler\" \r\n                type=\"button\" \r\n                data-toggle=\"collapse\" \r\n                data-target=\"#navbarSupportedContent\" \r\n                aria-controls=\"navbarSupportedContent\" \r\n                aria-expanded=\"false\" \r\n                aria-label=\"Toggle navigation\"\r\n            >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink \r\n                            exact \r\n                            activeClassName=\"active-link active\" \r\n                            className=\"nav-link\" \r\n                            to=\"/\"\r\n                        >\r\n                            Home <span className=\"sr-only\">(current)</span>\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink \r\n                            exact \r\n                            activeClassName=\"active-link active\" \r\n                            className=\"nav-link\" \r\n                            to=\"/meme\"\r\n                        >\r\n                            Memes\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport welcomePic from '../assets/images/meme-welcome.jpeg'\r\n\r\nexport default function Home(props) {\r\n\r\n    return (\r\n        <div className=\"container home\">\r\n            <img\r\n                src={welcomePic}\r\n                alt='Welcome meme'\r\n                className=\"welcome-pic\"\r\n            />\r\n            <h1 className=\"card-text\">Welcome to <br></br>Meme Genarator</h1>\r\n            <Link to=\"/meme\" className=\"btn btn-primary\">Start creating your memes</Link>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Canvas({ texts, currMeme}) {\r\n\r\n    return (<div className=\"canvas-container\">\r\n                <img\r\n                    src={currMeme.url}\r\n                    alt={currMeme.name}\r\n                    className=\"canvas-img\"\r\n                />\r\n                <div \r\n                    className=\"flex column justify-content-between align-center canvas-texts-container\"\r\n                    style={{ position: \"absolute\", width: \"100%\", height: `${currMeme.height}px`, maxHeight: \"500px\" }}\r\n                >\r\n                    <h2 \r\n                        className=\"text1\" \r\n                        style={{ fontFamily: texts.font, top: \"16px\", color: texts.color1, WebkitTextStroke: `3px ${texts.stroke1}` }}\r\n                    >{texts.text1}</h2>\r\n                    <h2 \r\n                        className=\"text2\" \r\n                        style={{ fontFamily: texts.font, bottom: \"32px\", color: texts.color2, WebkitTextStroke: `3px ${texts.stroke2}` }}\r\n                    >{texts.text2}</h2>\r\n                </div>\r\n            </div>)\r\n}\r\n\r\n","import { useState } from 'react';\r\n\r\nfunction useInput(initialVal) {\r\n\r\n    const [value, setValue] = useState(initialVal);\r\n    \r\n    const reset = () => {\r\n        setValue(initialVal);\r\n    };\r\n\r\n    const bind = {\r\n        value: value,\r\n        onChange: e => setValue(e.target.value)\r\n    }\r\n    \r\n    return [value, bind, reset];\r\n};\r\nexport default useInput;","import { useState } from 'react';\r\n\r\nfunction useToggle(initialVal = false) {\r\n    \r\n    const [state, setState] = useState(initialVal);\r\n    \r\n    const toggle = () => {\r\n        setState(!state);\r\n    }\r\n    return [state, toggle];\r\n}\r\n\r\nexport default useToggle\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nfunction ColorPicker({ changeColor, colorType, toggleVisibility }) {\r\n\r\n    const [color, setColor] = useState();\r\n    \r\n    useEffect(() => {\r\n        changeColor(color, colorType);\r\n    }, [color, colorType, changeColor])\r\n\r\n    const onColorSelection = (e) => {\r\n        let changedColor = e.target.value;\r\n        setColor(changedColor);\r\n        changeColor(changedColor, colorType);\r\n    }\r\n\r\n    return (\r\n        <div className=\"color-picker\">\r\n            <button \r\n                className=\"btn btn-sm btn-secondary close-color-picker\"\r\n                onClick={toggleVisibility}\r\n            >X</button>\r\n            <input \r\n                type=\"checkbox\" \r\n                id=\"chk-ham-menu\" \r\n                className=\"ham-check\" \r\n                onChange={(e)=>setColor(e.target.value)} \r\n            />\r\n            <div className=\"ham-menu flex column\">\r\n                <div className=\"flex\">\r\n                    <label htmlFor=\"amethyst\" className=\"color-picker amethyst\" data-color=\"#9b59b6\" onClick={onColorSelection}></label>\r\n                    <label htmlFor=\"peter\" className=\"color-picker peter\" data-color=\"#3498db\" onClick={onColorSelection}></label>\r\n                    <label htmlFor=\"emarald\" className=\"color-picker emarald\" data-color=\"#2ecc71\" onClick={onColorSelection}></label>\r\n                    <label htmlFor=\"carrot\" className=\"color-picker carrot\" data-color=\"#e67e22\" onClick={onColorSelection}></label>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <label htmlFor=\"alizarin\" className=\"color-picker alizarin\" data-color=\"e74c3c\" onClick={onColorSelection}></label>\r\n                    <label htmlFor=\"sun\" className=\"color-picker sun\" data-color=\"#f1c40f\" onClick={onColorSelection}></label>\r\n                    <label htmlFor=\"black\" className=\"color-picker black\" data-color=\"#000000\" onClick={onColorSelection}></label>\r\n                    <label htmlFor=\"white\" className=\"color-picker white\" data-color=\"#ffffff\" onClick={onColorSelection}></label>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <input type=\"text\" name=\"color-chooser\" id=\"\" value=\"#ffffff\" placeholder=\"#ffffff\" onChange={onColorSelection} />\r\n                </div>\r\n            </div>\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"black\" value=\"#000000\" onChange={onColorSelection} />\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"white\" value=\"#ffffff\" onChange={onColorSelection} />\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"amethyst\" value=\"#9b59b6\" onChange={onColorSelection} />\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"peter\" value=\"#3498db\" onChange={onColorSelection} />\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"emarald\" value=\"#2ecc71\" onChange={onColorSelection} />\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"carrot\" value=\"#e67e22\" onChange={onColorSelection} />\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"alizarin\" value=\"#e74c3c\" onChange={onColorSelection} />\r\n            <input type=\"radio\" name=\"color-chooser\" id=\"sun\" value=\"#f1c40f\" onChange={onColorSelection} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorPicker\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport useInput from '../../hooks/useInput';\r\nimport useToggle from '../../hooks/useToggle';\r\nimport ColorPicker from './ColorPicker';\r\n\r\nfunction MemeForm({ handleFormData, updateTexts, currMeme }) {\r\n\r\n    const [text1, bindText1, resetText1] = useInput(\"\");\r\n    const [text2, bindText2, resetText2] = useInput(\"\");\r\n    const [font, bindFont, resetFont] = useInput('impact');\r\n    const [isVisible, toggleIsVisible] = useToggle(false);\r\n    const [color1, setColor1] = useState(\"#ffffff\");\r\n    const [color2, setColor2] = useState(\"#ffffff\");\r\n    const [stroke1, setStroke1] = useState(\"#000000\");\r\n    const [stroke2, setStroke2] = useState(\"#000000\");\r\n    const [type, setType] = useState();\r\n\r\n    useEffect(() => {\r\n        updateTexts({ text1, color1, stroke1, text2, color2, stroke2, font });\r\n    }, [text1, color1, stroke1, text2, color2, stroke2, font])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const memeData = { text1, color1, stroke1, text2, color2, stroke2, font, currMeme };\r\n        resetText1();\r\n        resetText2();\r\n        resetFont();\r\n        handleFormData(memeData);\r\n    }\r\n\r\n    const toggleVisibility = () => {\r\n        toggleIsVisible(!isVisible);\r\n    }\r\n\r\n    const changeColor = useCallback((color, colorType) => {\r\n\r\n        switch (colorType) {\r\n            case 'color1':\r\n                setColor1(color);\r\n                break;\r\n            case 'color2':\r\n                setColor2(color);\r\n                break;\r\n            case 'stroke1':\r\n                setStroke1(color);\r\n                break;\r\n            case 'stroke2':\r\n                setStroke2(color);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, []);\r\n\r\n    const toggleColorPicker = (e) => {\r\n        e.preventDefault();\r\n        let type = e.currentTarget.attributes['input-data'].value;\r\n        setType(type);\r\n        toggleVisibility();\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit-form flex justify-center column\">\r\n            <form className=\"flex column justify-center\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"inputFont\">Choose Font</label>\r\n                    <select\r\n                        id=\"inputFont\"\r\n                        name=\"font\"\r\n                        className=\"form-control\"\r\n                        {...bindFont}\r\n                    >\r\n                        <option style={{ fontFamily: \"Impact\" }} value=\"impact\" defaultValue>Impact</option>\r\n                        <option value=\"arial\" style={{ fontFamily: \"Arial\" }} >Arial</option>\r\n                        <option value=\"comic sans ms\" style={{ fontFamily: \"Comic Sans MS\" }} >Comic Sans MS</option>\r\n                        <option value=\"helvetica\" style={{ fontFamily: \"Helvetica\" }} >Helvetica</option>\r\n                        <option value=\"times\" style={{ fontFamily: \"Times\" }} >Times</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div className=\"form-group flex\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"text1\"\r\n                        {...bindText1}\r\n                        required\r\n                        placeholder=\"Top Text\" />\r\n                    <button\r\n                        onClick={toggleColorPicker}\r\n                        style={{ backgroundColor: \"transparent\" }}\r\n                        input-data=\"color1\"\r\n                        title=\"font color\"\r\n                    >\r\n                        <div style={{ backgroundColor: color1, width: \"15px\", height: \"15px\" }}></div>\r\n                    </button>\r\n                    <button\r\n                        onClick={toggleColorPicker}\r\n                        style={{ backgroundColor: \"transparent\" }}\r\n                        input-data=\"stroke1\"\r\n                        title=\"stroke color\"\r\n                    >\r\n                        <div style={{ backgroundColor: stroke1, width: \"15px\", height: \"15px\" }}></div>\r\n                    </button>\r\n                </div>\r\n                <div className=\"form-group flex\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"text2\"\r\n                        {...bindText2}\r\n                        placeholder=\"Bottom Text\" />\r\n                    <button\r\n                        onClick={toggleColorPicker}\r\n                        style={{ backgroundColor: \"transparent\" }}\r\n                        input-data=\"color2\"\r\n                        title=\"font color\"\r\n                    >\r\n                        <div style={{ backgroundColor: color2, width: \"15px\", height: \"15px\" }}></div>\r\n                    </button>\r\n                    <button\r\n                        onClick={toggleColorPicker}\r\n                        style={{ backgroundColor: \"transparent\" }}\r\n                        input-data=\"stroke2\"\r\n                        title=\"stroke color\"\r\n                    >\r\n                        <div style={{ backgroundColor: stroke2, width: \"15px\", height: \"15px\" }}></div>\r\n                    </button>\r\n                </div>\r\n                {isVisible && <ColorPicker\r\n                                changeColor={changeColor}\r\n                                colorType={type}\r\n                                toggleVisibility={toggleVisibility}\r\n                            />}\r\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={submitHandler}>Generate Meme</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeForm;\r\n","import React, {useState, useEffect} from 'react';\r\nimport AliceCarousel from 'react-alice-carousel';\r\n\r\nexport default function PicsCarousel({ memes, onSelectPic}) {\r\n    \r\n    const [carouselPics, setCarouselPics] = useState([]);\r\n\r\n    const stagePadding = {\r\n        paddingLeft: 50,\r\n        paddingRight: 100\r\n    };\r\n\r\n    useEffect(() => {\r\n        (async function(){\r\n            const picsToRender = [];\r\n            if (memes){\r\n                memes.map((meme) => {\r\n                    return picsToRender.push(meme.url)\r\n                })\r\n                await setCarouselPics(picsToRender);\r\n            }\r\n        })();\r\n        renderImages(carouselPics);\r\n    }, [memes])\r\n    \r\n    function renderImages(pictures) {\r\n        const handleOnDragStart = e => e.preventDefault();\r\n        return pictures.map(picture => {\r\n            return (<img\r\n                        alt={picture}\r\n                        key={picture}\r\n                        src={picture}\r\n                        style={{ width: \"78px\", height: \"78px\", cursor: \"pointer\" }}\r\n                        onDragStart={handleOnDragStart}\r\n                        onClick={(e) => onSelectPic(e.currentTarget.attributes['alt'].value)}\r\n                    />);\r\n        });\r\n    }\r\n\r\n    return (<>\r\n        { memes && (memes.length) && <div className=\"edit-container\">\r\n            <AliceCarousel\r\n                mouseDragEnabled\r\n                duration={400}\r\n                stagePadding={stagePadding}\r\n            >\r\n                {renderImages(carouselPics)}\r\n            </AliceCarousel>\r\n        </div>}\r\n    </>)\r\n}","import React from 'react';\r\nimport MemeForm from './MemeForm';\r\nimport PicsCarousel from './PicsCarousel';\r\n\r\nexport default function MemeEdit(props) {\r\n    \r\n    function handleFormData(memeUrl){\r\n        props.handleFormData(memeUrl);\r\n    }\r\n\r\n    function updateTexts(texts) {\r\n        props.updateTexts(texts);\r\n    }\r\n\r\n    function onSelectPic(selectedPic){\r\n        props.onSelectPic(selectedPic)\r\n    }\r\n\r\n    return (<React.Fragment>\r\n        <div className=\"edit-container\">\r\n            <h2 className=\"meme-name\">{props.currMeme.name}</h2>\r\n            <PicsCarousel memes={props.memes} onSelectPic={onSelectPic}/>\r\n            <MemeForm handleFormData={handleFormData} updateTexts={updateTexts} currMeme={props.currMeme}/>\r\n        </div>\r\n    </React.Fragment>)\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction MemeModal({newMemeUrl}) {\r\n    return (\r\n        <div className=\"flex justify-center align-center column\">\r\n            <img className=\"meme-pic-edited\" src={newMemeUrl} alt=\"\"/>\r\n            <a \r\n                className=\"nav-link meme-link\" \r\n                href={newMemeUrl}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                {newMemeUrl}\r\n            </a>\r\n            <Link\r\n                className=\"btn btn-success\"\r\n                to=\"/meme\">\r\n                Generate Another Meme\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeModal\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport memeService from '../services/memeService';\r\nimport Canvas from '../cmps/Canvas';\r\nimport MemeEdit from '../cmps/Edit/MemeEdit';\r\nimport useToggle from '../hooks/useToggle';\r\nimport MemeModal from '../cmps/MemeModal';\r\n\r\nexport default function MemeDetails({ memes }) {\r\n\r\n    let { id } = useParams();\r\n    const history = useHistory();\r\n    const [currMeme, setCurrMeme] = useState({});\r\n    const [texts, setTexts] = useState({});\r\n    const [font, setFont] = useState();\r\n    const [newMemeUrl, setnewMemeUrl] = useState('');\r\n    const [isEditMode, toggleEditMode] = useToggle(true);\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            const currMeme = await memeService.getMemeById(id);\r\n            setCurrMeme(currMeme);\r\n            setnewMemeUrl(newMemeUrl);\r\n        })()\r\n    }, [id, newMemeUrl, font]);\r\n\r\n    function onSelectPic(picUrl) {\r\n        const selectedMeme = memes.filter((meme) => meme.url === picUrl);\r\n        id = selectedMeme[0].id;\r\n        setCurrMeme(selectedMeme[0]);\r\n        history.push(`/meme/${id}/edit`);\r\n    }\r\n\r\n    async function handleFormData(generatedMemeData) {\r\n        console.log(generatedMemeData);\r\n        \r\n        let newMemeUrl = await memeService.postMeme(generatedMemeData);\r\n        toggleEditMode(false);\r\n        setCurrMeme(currMeme);\r\n        setnewMemeUrl(newMemeUrl);\r\n        history.push(`/meme/${id}`);\r\n    }\r\n\r\n    function updateTexts(texts) {\r\n        console.log(texts);\r\n        console.log(texts.font);\r\n        setTexts(texts);\r\n        setFont(texts.font);\r\n    }\r\n\r\n    function onCloseModal() {\r\n        toggleEditMode(!isEditMode);\r\n        history.push('/meme');\r\n    }\r\n\r\n    return (<React.Fragment>\r\n        {isEditMode && <section className=\"meme-container flex justify-around\">\r\n            <Canvas\r\n                currMeme={currMeme}\r\n                texts={texts}\r\n            />\r\n            <MemeEdit\r\n                memes={memes}\r\n                currMeme={currMeme}\r\n                handleFormData={handleFormData}\r\n                updateTexts={updateTexts}\r\n                onSelectPic={onSelectPic}\r\n            />\r\n        </section>}\r\n        {!isEditMode && <>\r\n            <section className=\"meme-modal-container\">\r\n                <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={onCloseModal}>X\r\n                </button>\r\n                <MemeModal newMemeUrl={newMemeUrl} />\r\n            </section>\r\n        </>}\r\n    </React.Fragment>)\r\n}\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default function MemePreview(props) {\r\n    \r\n    const history = useHistory();\r\n    const { url, name, id } = props.meme;\r\n\r\n    function onSelectCard() {\r\n        history.push(`/meme/${id}/edit`);\r\n    }\r\n\r\n    return (\r\n        \r\n        <div onClick={onSelectCard}>\r\n            <img\r\n                src={url}\r\n                alt={name}\r\n                className=\"card-img-top meme-img-preview\"\r\n            />\r\n            <div className=\"card-body\">\r\n                <p className=\"card-text\">{name}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n ","import React from 'react'\r\nimport MemePreview from './MemePreview';\r\n\r\nexport default function MemeList(props) {\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <ul className=\"gallery-container flex justify-center container\">\r\n                {props.memes.map((meme) => {\r\n                return <li \r\n                        key={meme.id}\r\n                        className=\"card\"\r\n                        >\r\n                        <MemePreview meme={meme}/>\r\n                       </li>\r\n                })}\r\n            </ul>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport MemeList from '../cmps/MemeList';\r\n\r\nexport default function MemeApp({memes}) {\r\n\r\n    return (\r\n        <main className=\"container-fluid container\">\r\n            <h2 className=\"gallery-title\">Choose a meme to start editing</h2>\r\n            <MemeList memes={memes}/>\r\n        </main>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport memeService from './services/memeService';\r\nimport Navbar from './cmps/Navbar';\r\nimport Home from './pages/Home';\r\nimport MemeDetails from './pages/MemeDetails';\r\nimport MemeApp from './pages/MemeApp';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() {\r\n\r\n  const [memes, setMemes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const memesToRender = await memeService.getMemes();\r\n      setMemes(memesToRender);\r\n    })()\r\n  }, []);\r\n\r\n  return (\r\n    <Router history={history}>\r\n      <div>\r\n        <Navbar/>\r\n        <Switch>\r\n          <Route exact component={Home} path=\"/meme-generator-react\" />\r\n          <Route exact component={Home} path=\"/\" />\r\n          <Route exact render={() => <MemeApp memes={memes}/>} path=\"/meme\" />\r\n          <Route exact render={() => <MemeDetails memes={memes} />} path=\"/meme/:id/edit\" />\r\n          <Route exact component={MemeDetails} path=\"/meme/:id\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './assets/styles/global.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}